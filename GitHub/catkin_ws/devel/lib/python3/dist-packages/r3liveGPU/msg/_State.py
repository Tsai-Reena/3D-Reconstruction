# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from r3liveGPU/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class State(genpy.Message):
  _md5sum = "e1348c3b12f099a76e76d6b155ce1633"
  _type = "r3liveGPU/State"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# State.msg
std_msgs/Header header       # ROS標頭
float64[9] rot_end           # Rotation matrix at the end lidar point
float64[3] pos_end           # Position at the end lidar point (world frame)
float64[3] vel_end           # Velocity at the end lidar point (world frame)
float64[3] bias_g            # Gyroscope bias
float64[3] bias_a            # Accelerator bias
float64[3] gravity           # Estimated gravity acceleration
float64[9] rot_ext_i2c       # Extrinsic rotation between IMU frame to Camera frame
float64[3] pos_ext_i2c       # Extrinsic position between IMU frame to Camera frame
float64[4] cam_intrinsic     # Camera intrinsic parameters [fx, fy, cx, cy]
float64[841] cov             # States covariance matrix
float64 td_ext_i2c_delta     # Extrinsic time delta between IMU frame to Camera frame

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','rot_end','pos_end','vel_end','bias_g','bias_a','gravity','rot_ext_i2c','pos_ext_i2c','cam_intrinsic','cov','td_ext_i2c_delta']
  _slot_types = ['std_msgs/Header','float64[9]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[9]','float64[3]','float64[4]','float64[841]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,rot_end,pos_end,vel_end,bias_g,bias_a,gravity,rot_ext_i2c,pos_ext_i2c,cam_intrinsic,cov,td_ext_i2c_delta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rot_end is None:
        self.rot_end = [0.] * 9
      if self.pos_end is None:
        self.pos_end = [0.] * 3
      if self.vel_end is None:
        self.vel_end = [0.] * 3
      if self.bias_g is None:
        self.bias_g = [0.] * 3
      if self.bias_a is None:
        self.bias_a = [0.] * 3
      if self.gravity is None:
        self.gravity = [0.] * 3
      if self.rot_ext_i2c is None:
        self.rot_ext_i2c = [0.] * 9
      if self.pos_ext_i2c is None:
        self.pos_ext_i2c = [0.] * 3
      if self.cam_intrinsic is None:
        self.cam_intrinsic = [0.] * 4
      if self.cov is None:
        self.cov = [0.] * 841
      if self.td_ext_i2c_delta is None:
        self.td_ext_i2c_delta = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.rot_end = [0.] * 9
      self.pos_end = [0.] * 3
      self.vel_end = [0.] * 3
      self.bias_g = [0.] * 3
      self.bias_a = [0.] * 3
      self.gravity = [0.] * 3
      self.rot_ext_i2c = [0.] * 9
      self.pos_ext_i2c = [0.] * 3
      self.cam_intrinsic = [0.] * 4
      self.cov = [0.] * 841
      self.td_ext_i2c_delta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_9d().pack(*self.rot_end))
      buff.write(_get_struct_3d().pack(*self.pos_end))
      buff.write(_get_struct_3d().pack(*self.vel_end))
      buff.write(_get_struct_3d().pack(*self.bias_g))
      buff.write(_get_struct_3d().pack(*self.bias_a))
      buff.write(_get_struct_3d().pack(*self.gravity))
      buff.write(_get_struct_9d().pack(*self.rot_ext_i2c))
      buff.write(_get_struct_3d().pack(*self.pos_ext_i2c))
      buff.write(_get_struct_4d().pack(*self.cam_intrinsic))
      buff.write(_get_struct_841d().pack(*self.cov))
      _x = self.td_ext_i2c_delta
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 72
      self.rot_end = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.pos_end = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.vel_end = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.bias_g = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.bias_a = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.gravity = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.rot_ext_i2c = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.pos_ext_i2c = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.cam_intrinsic = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 6728
      self.cov = _get_struct_841d().unpack(str[start:end])
      start = end
      end += 8
      (self.td_ext_i2c_delta,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.rot_end.tostring())
      buff.write(self.pos_end.tostring())
      buff.write(self.vel_end.tostring())
      buff.write(self.bias_g.tostring())
      buff.write(self.bias_a.tostring())
      buff.write(self.gravity.tostring())
      buff.write(self.rot_ext_i2c.tostring())
      buff.write(self.pos_ext_i2c.tostring())
      buff.write(self.cam_intrinsic.tostring())
      buff.write(self.cov.tostring())
      _x = self.td_ext_i2c_delta
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 72
      self.rot_end = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.pos_end = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.vel_end = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.bias_g = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.bias_a = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.gravity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 72
      self.rot_ext_i2c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.pos_ext_i2c = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.cam_intrinsic = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 6728
      self.cov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=841)
      start = end
      end += 8
      (self.td_ext_i2c_delta,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_841d = None
def _get_struct_841d():
    global _struct_841d
    if _struct_841d is None:
        _struct_841d = struct.Struct("<841d")
    return _struct_841d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
