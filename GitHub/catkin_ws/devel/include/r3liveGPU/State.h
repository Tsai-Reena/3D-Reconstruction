// Generated by gencpp from file r3liveGPU/State.msg
// DO NOT EDIT!


#ifndef R3LIVEGPU_MESSAGE_STATE_H
#define R3LIVEGPU_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace r3liveGPU
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : header()
    , rot_end()
    , pos_end()
    , vel_end()
    , bias_g()
    , bias_a()
    , gravity()
    , rot_ext_i2c()
    , pos_ext_i2c()
    , cam_intrinsic()
    , cov()
    , td_ext_i2c_delta(0.0)  {
      rot_end.assign(0.0);

      pos_end.assign(0.0);

      vel_end.assign(0.0);

      bias_g.assign(0.0);

      bias_a.assign(0.0);

      gravity.assign(0.0);

      rot_ext_i2c.assign(0.0);

      pos_ext_i2c.assign(0.0);

      cam_intrinsic.assign(0.0);

      cov.assign(0.0);
  }
  State_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rot_end()
    , pos_end()
    , vel_end()
    , bias_g()
    , bias_a()
    , gravity()
    , rot_ext_i2c()
    , pos_ext_i2c()
    , cam_intrinsic()
    , cov()
    , td_ext_i2c_delta(0.0)  {
  (void)_alloc;
      rot_end.assign(0.0);

      pos_end.assign(0.0);

      vel_end.assign(0.0);

      bias_g.assign(0.0);

      bias_a.assign(0.0);

      gravity.assign(0.0);

      rot_ext_i2c.assign(0.0);

      pos_ext_i2c.assign(0.0);

      cam_intrinsic.assign(0.0);

      cov.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 9>  _rot_end_type;
  _rot_end_type rot_end;

   typedef boost::array<double, 3>  _pos_end_type;
  _pos_end_type pos_end;

   typedef boost::array<double, 3>  _vel_end_type;
  _vel_end_type vel_end;

   typedef boost::array<double, 3>  _bias_g_type;
  _bias_g_type bias_g;

   typedef boost::array<double, 3>  _bias_a_type;
  _bias_a_type bias_a;

   typedef boost::array<double, 3>  _gravity_type;
  _gravity_type gravity;

   typedef boost::array<double, 9>  _rot_ext_i2c_type;
  _rot_ext_i2c_type rot_ext_i2c;

   typedef boost::array<double, 3>  _pos_ext_i2c_type;
  _pos_ext_i2c_type pos_ext_i2c;

   typedef boost::array<double, 4>  _cam_intrinsic_type;
  _cam_intrinsic_type cam_intrinsic;

   typedef boost::array<double, 841>  _cov_type;
  _cov_type cov;

   typedef double _td_ext_i2c_delta_type;
  _td_ext_i2c_delta_type td_ext_i2c_delta;





  typedef boost::shared_ptr< ::r3liveGPU::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r3liveGPU::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::r3liveGPU::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::r3liveGPU::State > StatePtr;
typedef boost::shared_ptr< ::r3liveGPU::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r3liveGPU::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r3liveGPU::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r3liveGPU::State_<ContainerAllocator1> & lhs, const ::r3liveGPU::State_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rot_end == rhs.rot_end &&
    lhs.pos_end == rhs.pos_end &&
    lhs.vel_end == rhs.vel_end &&
    lhs.bias_g == rhs.bias_g &&
    lhs.bias_a == rhs.bias_a &&
    lhs.gravity == rhs.gravity &&
    lhs.rot_ext_i2c == rhs.rot_ext_i2c &&
    lhs.pos_ext_i2c == rhs.pos_ext_i2c &&
    lhs.cam_intrinsic == rhs.cam_intrinsic &&
    lhs.cov == rhs.cov &&
    lhs.td_ext_i2c_delta == rhs.td_ext_i2c_delta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r3liveGPU::State_<ContainerAllocator1> & lhs, const ::r3liveGPU::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r3liveGPU

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::r3liveGPU::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r3liveGPU::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r3liveGPU::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r3liveGPU::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r3liveGPU::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r3liveGPU::State_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r3liveGPU::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1348c3b12f099a76e76d6b155ce1633";
  }

  static const char* value(const ::r3liveGPU::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1348c3b12f099a7ULL;
  static const uint64_t static_value2 = 0x6e76d6b155ce1633ULL;
};

template<class ContainerAllocator>
struct DataType< ::r3liveGPU::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r3liveGPU/State";
  }

  static const char* value(const ::r3liveGPU::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r3liveGPU::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# State.msg\n"
"std_msgs/Header header       # ROS標頭\n"
"float64[9] rot_end           # Rotation matrix at the end lidar point\n"
"float64[3] pos_end           # Position at the end lidar point (world frame)\n"
"float64[3] vel_end           # Velocity at the end lidar point (world frame)\n"
"float64[3] bias_g            # Gyroscope bias\n"
"float64[3] bias_a            # Accelerator bias\n"
"float64[3] gravity           # Estimated gravity acceleration\n"
"float64[9] rot_ext_i2c       # Extrinsic rotation between IMU frame to Camera frame\n"
"float64[3] pos_ext_i2c       # Extrinsic position between IMU frame to Camera frame\n"
"float64[4] cam_intrinsic     # Camera intrinsic parameters [fx, fy, cx, cy]\n"
"float64[841] cov             # States covariance matrix\n"
"float64 td_ext_i2c_delta     # Extrinsic time delta between IMU frame to Camera frame\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::r3liveGPU::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r3liveGPU::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rot_end);
      stream.next(m.pos_end);
      stream.next(m.vel_end);
      stream.next(m.bias_g);
      stream.next(m.bias_a);
      stream.next(m.gravity);
      stream.next(m.rot_ext_i2c);
      stream.next(m.pos_ext_i2c);
      stream.next(m.cam_intrinsic);
      stream.next(m.cov);
      stream.next(m.td_ext_i2c_delta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r3liveGPU::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r3liveGPU::State_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rot_end: ";
    if (v.rot_end.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rot_end.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.rot_end[i]);
    }
    if (v.rot_end.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos_end: ";
    if (v.pos_end.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.pos_end.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.pos_end[i]);
    }
    if (v.pos_end.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vel_end: ";
    if (v.vel_end.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.vel_end.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.vel_end[i]);
    }
    if (v.vel_end.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bias_g: ";
    if (v.bias_g.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.bias_g.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.bias_g[i]);
    }
    if (v.bias_g.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bias_a: ";
    if (v.bias_a.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.bias_a.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.bias_a[i]);
    }
    if (v.bias_a.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gravity: ";
    if (v.gravity.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.gravity.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.gravity[i]);
    }
    if (v.gravity.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rot_ext_i2c: ";
    if (v.rot_ext_i2c.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rot_ext_i2c.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.rot_ext_i2c[i]);
    }
    if (v.rot_ext_i2c.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos_ext_i2c: ";
    if (v.pos_ext_i2c.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.pos_ext_i2c.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.pos_ext_i2c[i]);
    }
    if (v.pos_ext_i2c.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cam_intrinsic: ";
    if (v.cam_intrinsic.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.cam_intrinsic.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.cam_intrinsic[i]);
    }
    if (v.cam_intrinsic.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cov: ";
    if (v.cov.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.cov.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.cov[i]);
    }
    if (v.cov.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "td_ext_i2c_delta: ";
    Printer<double>::stream(s, indent + "  ", v.td_ext_i2c_delta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R3LIVEGPU_MESSAGE_STATE_H
