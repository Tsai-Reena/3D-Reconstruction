// Generated by gencpp from file r3liveGPU/StampedEulerCur.msg
// DO NOT EDIT!


#ifndef R3LIVEGPU_MESSAGE_STAMPEDEULERCUR_H
#define R3LIVEGPU_MESSAGE_STAMPEDEULERCUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace r3liveGPU
{
template <class ContainerAllocator>
struct StampedEulerCur_
{
  typedef StampedEulerCur_<ContainerAllocator> Type;

  StampedEulerCur_()
    : header()
    , euler_cur()  {
    }
  StampedEulerCur_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , euler_cur(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _euler_cur_type;
  _euler_cur_type euler_cur;





  typedef boost::shared_ptr< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> const> ConstPtr;

}; // struct StampedEulerCur_

typedef ::r3liveGPU::StampedEulerCur_<std::allocator<void> > StampedEulerCur;

typedef boost::shared_ptr< ::r3liveGPU::StampedEulerCur > StampedEulerCurPtr;
typedef boost::shared_ptr< ::r3liveGPU::StampedEulerCur const> StampedEulerCurConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r3liveGPU::StampedEulerCur_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r3liveGPU::StampedEulerCur_<ContainerAllocator1> & lhs, const ::r3liveGPU::StampedEulerCur_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.euler_cur == rhs.euler_cur;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r3liveGPU::StampedEulerCur_<ContainerAllocator1> & lhs, const ::r3liveGPU::StampedEulerCur_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r3liveGPU

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0192c2a77e104beded3cf510e007f9c7";
  }

  static const char* value(const ::r3liveGPU::StampedEulerCur_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0192c2a77e104bedULL;
  static const uint64_t static_value2 = 0xed3cf510e007f9c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r3liveGPU/StampedEulerCur";
  }

  static const char* value(const ::r3liveGPU::StampedEulerCur_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# StampedEulerCur.msg\n"
"\n"
"std_msgs/Header header\n"
"geometry_msgs/Vector3 euler_cur\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::r3liveGPU::StampedEulerCur_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.euler_cur);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StampedEulerCur_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r3liveGPU::StampedEulerCur_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r3liveGPU::StampedEulerCur_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "euler_cur: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.euler_cur);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R3LIVEGPU_MESSAGE_STAMPEDEULERCUR_H
